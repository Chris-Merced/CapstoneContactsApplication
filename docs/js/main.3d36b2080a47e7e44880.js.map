{"version":3,"file":"js/main.3d36b2080a47e7e44880.js","mappings":"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","sources":["webpack://simple-contacts-app/./src/models/Contact.js","webpack://simple-contacts-app/./src/services/ContactService.js","webpack://simple-contacts-app/./src/components/ContactApp.js","webpack://simple-contacts-app/./src/index.js"],"sourcesContent":["//Contact class - mirrors the Java implementation with validation\r\n\r\nexport class Contact {\r\n    constructor(ID, firstName, lastName, phone, address) {\r\n        // Validation matching Java implementation\r\n        if (!ID || ID.length > 10) {\r\n            throw new Error(\"Invalid ID\");\r\n        }\r\n        if (!firstName || firstName.length > 10) {\r\n            throw new Error(\"Invalid firstName\");\r\n        }\r\n        if (!lastName || lastName.length > 10) {\r\n            throw new Error(\"Invalid lastName\");\r\n        }\r\n        if (!phone || phone.length !== 10 || !/^\\d+$/.test(phone)) {\r\n            throw new Error(\"Invalid phone\");\r\n        }\r\n        if (!address || address.length > 30) {\r\n            throw new Error(\"Invalid address\");\r\n        }\r\n\r\n        this.ID = ID;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.phone = phone;\r\n        this.address = address;\r\n    }\r\n\r\n    // Getters\r\n    getID() { \r\n        return this.ID; \r\n    }\r\n    \r\n    getFirstName() { \r\n        return this.firstName; \r\n    }\r\n    \r\n    getLastName() { \r\n        return this.lastName; \r\n    }\r\n    \r\n    getPhone() { \r\n        return this.phone; \r\n    }\r\n    \r\n    getAddress() { \r\n        return this.address; \r\n    }\r\n\r\n    // Setters with validation\r\n    setFirstName(firstName) {\r\n        if (!firstName || firstName.length > 10) {\r\n            throw new Error(\"Invalid firstName\");\r\n        }\r\n        this.firstName = firstName;\r\n    }\r\n\r\n    setLastName(lastName) {\r\n        if (!lastName || lastName.length > 10) {\r\n            throw new Error(\"Invalid lastName\");\r\n        }\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    setPhone(phone) {\r\n        if (!phone || phone.length !== 10 || !/^\\d+$/.test(phone)) {\r\n            throw new Error(\"Invalid phone\");\r\n        }\r\n        this.phone = phone;\r\n    }\r\n\r\n    setAddress(address) {\r\n        if (!address || address.length > 30) {\r\n            throw new Error(\"Invalid address\");\r\n        }\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return `ID: ${this.ID}, Name: ${this.firstName} ${this.lastName}, Phone: ${this.phone}, Address: ${this.address}`;\r\n    }\r\n}","import { Contact } from '../models/Contact.js';\r\n\r\n//ContactService class - mirrors the Java implementation for managing contacts\r\n\r\nexport class ContactService {\r\n    constructor() {\r\n        this.contactList = [];\r\n        this.loadFromStorage();\r\n    }\r\n\r\n    addContact(newContact) {\r\n        // Check if contact with same ID already exists\r\n        const existingContact = this.contactList.find(contact => \r\n            contact.getID() === newContact.getID()\r\n        );\r\n        \r\n        if (existingContact) {\r\n            throw new Error(\"Contact with ID already exists\");\r\n        }\r\n        \r\n        this.contactList.push(newContact);\r\n        this.saveToStorage();\r\n    }\r\n\r\n    deleteContact(contactID) {\r\n        const index = this.contactList.findIndex(contact => \r\n            contact.getID() === contactID\r\n        );\r\n        \r\n        if (index === -1) {\r\n            throw new Error(\"Contact with ID not found\");\r\n        }\r\n        \r\n        this.contactList.splice(index, 1);\r\n        this.saveToStorage();\r\n    }\r\n\r\n    updateContact(contactID, firstName, lastName, phone, address) {\r\n        const contact = this.contactList.find(contact => \r\n            contact.getID() === contactID\r\n        );\r\n        \r\n        if (!contact) {\r\n            throw new Error(\"Contact with ID not found\");\r\n        }\r\n\r\n        try {\r\n            if (firstName !== null && firstName !== undefined) {\r\n                contact.setFirstName(firstName);\r\n            }\r\n            if (lastName !== null && lastName !== undefined) {\r\n                contact.setLastName(lastName);\r\n            }\r\n            if (phone !== null && phone !== undefined) {\r\n                contact.setPhone(phone);\r\n            }\r\n            if (address !== null && address !== undefined) {\r\n                contact.setAddress(address);\r\n            }\r\n            this.saveToStorage();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getContact(contactID) {\r\n        const contact = this.contactList.find(contact => \r\n            contact.getID() === contactID\r\n        );\r\n        \r\n        if (!contact) {\r\n            throw new Error(\"Contact with ID not found\");\r\n        }\r\n        \r\n        return contact;\r\n    }\r\n\r\n    getAllContacts() {\r\n        return [...this.contactList];\r\n    }\r\n\r\n    // Storage methods for persistence\r\n    saveToStorage() {\r\n        const data = this.contactList.map(contact => ({\r\n            ID: contact.getID(),\r\n            firstName: contact.getFirstName(),\r\n            lastName: contact.getLastName(),\r\n            phone: contact.getPhone(),\r\n            address: contact.getAddress()\r\n        }));\r\n        localStorage.setItem('contacts', JSON.stringify(data));\r\n    }\r\n\r\n    loadFromStorage() {\r\n        try {\r\n            const data = localStorage.getItem('contacts');\r\n            if (data) {\r\n                const contacts = JSON.parse(data);\r\n                this.contactList = contacts.map(contactData => \r\n                    new Contact(\r\n                        contactData.ID,\r\n                        contactData.firstName,\r\n                        contactData.lastName,\r\n                        contactData.phone,\r\n                        contactData.address\r\n                    )\r\n                );\r\n            }\r\n        } catch (error) {\r\n            console.error('Error loading contacts from storage:', error);\r\n            this.contactList = [];\r\n        }\r\n    }\r\n}","import { Contact } from '../models/Contact.js';\r\nimport { ContactService } from '../services/ContactService.js';\r\n\r\n//ContactApp class - handles UI interactions and manages the contact application\r\n\r\nexport class ContactApp {\r\n    constructor() {\r\n        this.contactService = new ContactService();\r\n        this.initializeEventListeners();\r\n        this.renderContacts();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        const form = document.getElementById('contactForm');\r\n        form.addEventListener('submit', (e) => this.handleAddContact(e));\r\n    }\r\n\r\n    clearErrors() {\r\n        const errorElements = document.querySelectorAll('.error');\r\n        errorElements.forEach(el => el.textContent = '');\r\n    }\r\n\r\n    showError(fieldName, message) {\r\n        const errorElement = document.getElementById(`${fieldName}-error`);\r\n        if (errorElement) {\r\n            errorElement.textContent = message;\r\n        }\r\n    }\r\n\r\n    showSuccess(message) {\r\n        const successElement = document.getElementById('success-message');\r\n        successElement.textContent = message;\r\n        successElement.style.display = 'block';\r\n        setTimeout(() => {\r\n            successElement.style.display = 'none';\r\n        }, 3000);\r\n    }\r\n\r\n    handleAddContact(e) {\r\n        e.preventDefault();\r\n        this.clearErrors();\r\n\r\n        const formData = new FormData(e.target);\r\n        const contactData = {\r\n            ID: formData.get('contactId').trim(),\r\n            firstName: formData.get('firstName').trim(),\r\n            lastName: formData.get('lastName').trim(),\r\n            phone: formData.get('phone').trim(),\r\n            address: formData.get('address').trim()\r\n        };\r\n\r\n        try {\r\n            const contact = new Contact(\r\n                contactData.ID,\r\n                contactData.firstName,\r\n                contactData.lastName,\r\n                contactData.phone,\r\n                contactData.address\r\n            );\r\n\r\n            this.contactService.addContact(contact);\r\n            this.showSuccess('Contact added successfully!');\r\n            e.target.reset();\r\n            this.renderContacts();\r\n\r\n        } catch (error) {\r\n            const errorMessage = error.message;\r\n            if (errorMessage.includes('ID')) {\r\n                this.showError('contactId', errorMessage);\r\n            } else if (errorMessage.includes('firstName')) {\r\n                this.showError('firstName', errorMessage);\r\n            } else if (errorMessage.includes('lastName')) {\r\n                this.showError('lastName', errorMessage);\r\n            } else if (errorMessage.includes('phone')) {\r\n                this.showError('phone', errorMessage);\r\n            } else if (errorMessage.includes('address')) {\r\n                this.showError('address', errorMessage);\r\n            } else {\r\n                this.showError('contactId', errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleDeleteContact(contactID) {\r\n        if (confirm('Are you sure you want to delete this contact?')) {\r\n            try {\r\n                this.contactService.deleteContact(contactID);\r\n                this.showSuccess('Contact deleted successfully!');\r\n                this.renderContacts();\r\n            } catch (error) {\r\n                alert('Error deleting contact: ' + error.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleEditContact(contactID) {\r\n        const editForm = document.getElementById(`edit-${contactID}`);\r\n        if (editForm.classList.contains('active')) {\r\n            editForm.classList.remove('active');\r\n            return;\r\n        }\r\n\r\n        // Hide all other edit forms\r\n        document.querySelectorAll('.edit-form.active').forEach(form => {\r\n            form.classList.remove('active');\r\n        });\r\n\r\n        editForm.classList.add('active');\r\n    }\r\n\r\n    handleUpdateContact(contactID) {\r\n        const form = document.getElementById(`edit-form-${contactID}`);\r\n        const formData = new FormData(form);\r\n        \r\n        const updates = {\r\n            firstName: formData.get('firstName').trim(),\r\n            lastName: formData.get('lastName').trim(),\r\n            phone: formData.get('phone').trim(),\r\n            address: formData.get('address').trim()\r\n        };\r\n\r\n        try {\r\n            this.contactService.updateContact(\r\n                contactID,\r\n                updates.firstName || null,\r\n                updates.lastName || null,\r\n                updates.phone || null,\r\n                updates.address || null\r\n            );\r\n            \r\n            this.showSuccess('Contact updated successfully!');\r\n            document.getElementById(`edit-${contactID}`).classList.remove('active');\r\n            this.renderContacts();\r\n        } catch (error) {\r\n            alert('Error updating contact: ' + error.message);\r\n        }\r\n    }\r\n\r\n    renderContacts() {\r\n        const contactsList = document.getElementById('contactsList');\r\n        const contacts = this.contactService.getAllContacts();\r\n\r\n        if (contacts.length === 0) {\r\n            contactsList.innerHTML = `\r\n                <div class=\"empty-state\">\r\n                    No contacts yet. Add your first contact above!\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        contactsList.innerHTML = contacts.map(contact => `\r\n            <div class=\"contact-item\">\r\n                <div class=\"contact-info\">\r\n                    <div class=\"contact-name\">${contact.getFirstName()} ${contact.getLastName()}</div>\r\n                    <div class=\"contact-details\">\r\n                        ID: ${contact.getID()} | Phone: ${contact.getPhone()} | Address: ${contact.getAddress()}\r\n                    </div>\r\n                </div>\r\n                <div class=\"contact-actions\">\r\n                    <button class=\"btn-small btn-secondary\" onclick=\"app.handleEditContact('${contact.getID()}')\">\r\n                        Edit\r\n                    </button>\r\n                    <button class=\"btn-small btn-danger\" onclick=\"app.handleDeleteContact('${contact.getID()}')\">\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n                <div class=\"edit-form\" id=\"edit-${contact.getID()}\">\r\n                    <form id=\"edit-form-${contact.getID()}\" onsubmit=\"event.preventDefault(); app.handleUpdateContact('${contact.getID()}')\">\r\n                        <div class=\"form-row\">\r\n                            <div class=\"form-group\">\r\n                                <label>First Name</label>\r\n                                <input type=\"text\" name=\"firstName\" value=\"${contact.getFirstName()}\" required>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Last Name</label>\r\n                                <input type=\"text\" name=\"lastName\" value=\"${contact.getLastName()}\" required>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-row\">\r\n                            <div class=\"form-group\">\r\n                                <label>Phone</label>\r\n                                <input type=\"text\" name=\"phone\" value=\"${contact.getPhone()}\" required>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label>Address</label>\r\n                                <input type=\"text\" name=\"address\" value=\"${contact.getAddress()}\" required>\r\n                            </div>\r\n                        </div>\r\n                        <button type=\"submit\">Update Contact</button>\r\n                        <button type=\"button\" class=\"btn-secondary\" onclick=\"document.getElementById('edit-${contact.getID()}').classList.remove('active')\">\r\n                            Cancel\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n    }\r\n}","//Entry point for the application\r\n\r\nimport './styles/main.css';\r\nimport { ContactApp } from './components/ContactApp.js';\r\n\r\n//Start application processes once DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  window.app = new ContactApp();\r\n  console.log('Contacts application initialized successfully');\r\n});"],"names":["Contact","constructor","ID","firstName","lastName","phone","address","length","Error","test","this","getID","getFirstName","getLastName","getPhone","getAddress","setFirstName","setLastName","setPhone","setAddress","toString","ContactService","contactList","loadFromStorage","addContact","newContact","find","contact","push","saveToStorage","deleteContact","contactID","index","findIndex","splice","updateContact","error","getContact","getAllContacts","data","map","localStorage","setItem","JSON","stringify","getItem","contacts","parse","contactData","console","ContactApp","contactService","initializeEventListeners","renderContacts","document","getElementById","addEventListener","e","handleAddContact","clearErrors","querySelectorAll","forEach","el","textContent","showError","fieldName","message","errorElement","showSuccess","successElement","style","display","setTimeout","preventDefault","formData","FormData","target","get","trim","reset","errorMessage","includes","handleDeleteContact","confirm","alert","handleEditContact","editForm","classList","contains","remove","form","add","handleUpdateContact","updates","contactsList","innerHTML","join","window","app","log"],"sourceRoot":""}