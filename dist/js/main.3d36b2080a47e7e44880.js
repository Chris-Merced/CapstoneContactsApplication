!function(){"use strict";class t{constructor(t,e,s,n,a){if(!t||t.length>10)throw new Error("Invalid ID");if(!e||e.length>10)throw new Error("Invalid firstName");if(!s||s.length>10)throw new Error("Invalid lastName");if(!n||10!==n.length||!/^\d+$/.test(n))throw new Error("Invalid phone");if(!a||a.length>30)throw new Error("Invalid address");this.ID=t,this.firstName=e,this.lastName=s,this.phone=n,this.address=a}getID(){return this.ID}getFirstName(){return this.firstName}getLastName(){return this.lastName}getPhone(){return this.phone}getAddress(){return this.address}setFirstName(t){if(!t||t.length>10)throw new Error("Invalid firstName");this.firstName=t}setLastName(t){if(!t||t.length>10)throw new Error("Invalid lastName");this.lastName=t}setPhone(t){if(!t||10!==t.length||!/^\d+$/.test(t))throw new Error("Invalid phone");this.phone=t}setAddress(t){if(!t||t.length>30)throw new Error("Invalid address");this.address=t}toString(){return`ID: ${this.ID}, Name: ${this.firstName} ${this.lastName}, Phone: ${this.phone}, Address: ${this.address}`}}class e{constructor(){this.contactList=[],this.loadFromStorage()}addContact(t){if(this.contactList.find(e=>e.getID()===t.getID()))throw new Error("Contact with ID already exists");this.contactList.push(t),this.saveToStorage()}deleteContact(t){const e=this.contactList.findIndex(e=>e.getID()===t);if(-1===e)throw new Error("Contact with ID not found");this.contactList.splice(e,1),this.saveToStorage()}updateContact(t,e,s,n,a){const r=this.contactList.find(e=>e.getID()===t);if(!r)throw new Error("Contact with ID not found");try{null!=e&&r.setFirstName(e),null!=s&&r.setLastName(s),null!=n&&r.setPhone(n),null!=a&&r.setAddress(a),this.saveToStorage()}catch(t){throw t}}getContact(t){const e=this.contactList.find(e=>e.getID()===t);if(!e)throw new Error("Contact with ID not found");return e}getAllContacts(){return[...this.contactList]}saveToStorage(){const t=this.contactList.map(t=>({ID:t.getID(),firstName:t.getFirstName(),lastName:t.getLastName(),phone:t.getPhone(),address:t.getAddress()}));localStorage.setItem("contacts",JSON.stringify(t))}loadFromStorage(){try{const e=localStorage.getItem("contacts");if(e){const s=JSON.parse(e);this.contactList=s.map(e=>new t(e.ID,e.firstName,e.lastName,e.phone,e.address))}}catch(t){console.error("Error loading contacts from storage:",t),this.contactList=[]}}}class s{constructor(){this.contactService=new e,this.initializeEventListeners(),this.renderContacts()}initializeEventListeners(){document.getElementById("contactForm").addEventListener("submit",t=>this.handleAddContact(t))}clearErrors(){document.querySelectorAll(".error").forEach(t=>t.textContent="")}showError(t,e){const s=document.getElementById(`${t}-error`);s&&(s.textContent=e)}showSuccess(t){const e=document.getElementById("success-message");e.textContent=t,e.style.display="block",setTimeout(()=>{e.style.display="none"},3e3)}handleAddContact(e){e.preventDefault(),this.clearErrors();const s=new FormData(e.target),n={ID:s.get("contactId").trim(),firstName:s.get("firstName").trim(),lastName:s.get("lastName").trim(),phone:s.get("phone").trim(),address:s.get("address").trim()};try{const s=new t(n.ID,n.firstName,n.lastName,n.phone,n.address);this.contactService.addContact(s),this.showSuccess("Contact added successfully!"),e.target.reset(),this.renderContacts()}catch(t){const e=t.message;e.includes("ID")?this.showError("contactId",e):e.includes("firstName")?this.showError("firstName",e):e.includes("lastName")?this.showError("lastName",e):e.includes("phone")?this.showError("phone",e):e.includes("address")?this.showError("address",e):this.showError("contactId",e)}}handleDeleteContact(t){if(confirm("Are you sure you want to delete this contact?"))try{this.contactService.deleteContact(t),this.showSuccess("Contact deleted successfully!"),this.renderContacts()}catch(t){alert("Error deleting contact: "+t.message)}}handleEditContact(t){const e=document.getElementById(`edit-${t}`);e.classList.contains("active")?e.classList.remove("active"):(document.querySelectorAll(".edit-form.active").forEach(t=>{t.classList.remove("active")}),e.classList.add("active"))}handleUpdateContact(t){const e=document.getElementById(`edit-form-${t}`),s=new FormData(e),n={firstName:s.get("firstName").trim(),lastName:s.get("lastName").trim(),phone:s.get("phone").trim(),address:s.get("address").trim()};try{this.contactService.updateContact(t,n.firstName||null,n.lastName||null,n.phone||null,n.address||null),this.showSuccess("Contact updated successfully!"),document.getElementById(`edit-${t}`).classList.remove("active"),this.renderContacts()}catch(t){alert("Error updating contact: "+t.message)}}renderContacts(){const t=document.getElementById("contactsList"),e=this.contactService.getAllContacts();0!==e.length?t.innerHTML=e.map(t=>`\n            <div class="contact-item">\n                <div class="contact-info">\n                    <div class="contact-name">${t.getFirstName()} ${t.getLastName()}</div>\n                    <div class="contact-details">\n                        ID: ${t.getID()} | Phone: ${t.getPhone()} | Address: ${t.getAddress()}\n                    </div>\n                </div>\n                <div class="contact-actions">\n                    <button class="btn-small btn-secondary" onclick="app.handleEditContact('${t.getID()}')">\n                        Edit\n                    </button>\n                    <button class="btn-small btn-danger" onclick="app.handleDeleteContact('${t.getID()}')">\n                        Delete\n                    </button>\n                </div>\n                <div class="edit-form" id="edit-${t.getID()}">\n                    <form id="edit-form-${t.getID()}" onsubmit="event.preventDefault(); app.handleUpdateContact('${t.getID()}')">\n                        <div class="form-row">\n                            <div class="form-group">\n                                <label>First Name</label>\n                                <input type="text" name="firstName" value="${t.getFirstName()}" required>\n                            </div>\n                            <div class="form-group">\n                                <label>Last Name</label>\n                                <input type="text" name="lastName" value="${t.getLastName()}" required>\n                            </div>\n                        </div>\n                        <div class="form-row">\n                            <div class="form-group">\n                                <label>Phone</label>\n                                <input type="text" name="phone" value="${t.getPhone()}" required>\n                            </div>\n                            <div class="form-group">\n                                <label>Address</label>\n                                <input type="text" name="address" value="${t.getAddress()}" required>\n                            </div>\n                        </div>\n                        <button type="submit">Update Contact</button>\n                        <button type="button" class="btn-secondary" onclick="document.getElementById('edit-${t.getID()}').classList.remove('active')">\n                            Cancel\n                        </button>\n                    </form>\n                </div>\n            </div>\n        `).join(""):t.innerHTML='\n                <div class="empty-state">\n                    No contacts yet. Add your first contact above!\n                </div>\n            '}}document.addEventListener("DOMContentLoaded",()=>{window.app=new s,console.log("Contacts application initialized successfully")})}();
//# sourceMappingURL=main.3d36b2080a47e7e44880.js.map